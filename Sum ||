public class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        boolean[] chosen = new boolean[candidates.length];
        Arrays.sort(candidates);
        ArrayList<List<Integer>> res = new ArrayList<List<Integer>>();
        ArrayList<Integer> list = new ArrayList<Integer>();
        combinationSum(chosen, candidates, target, 0, res, list);
        return res;
    }
    private void combinationSum(boolean[] chosen, int[] candidates, int target, int s, ArrayList<List<Integer>> res, ArrayList<Integer> list) {
        if(target == 0){
            ArrayList<Integer> temp = new ArrayList<Integer>(list);
            res.add(temp);
        }else{
            for(int i = s; i < candidates.length; i++){
                if(i > 0 && candidates[i-1] == candidates[i] && !chosen[i-1]){
                    continue;
                }
                if(!chosen[i] && target - candidates[i] >= 0){
                    chosen[i] = true;
                    list.add(candidates[i]);
                    combinationSum(chosen, candidates, target - candidates[i], i, res, list);
                    list.remove(list.size()-1);
                    chosen[i] = false;
                }
            }
        }
    }
}
