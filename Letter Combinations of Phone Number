public class Solution {
    public List<String> letterCombinations(String digits) {
        Map<Integer, String> digitMap = new HashMap<Integer, String>();
        digitMap.put(0, "");
        digitMap.put(1, "");
        digitMap.put(2, "abc");
        digitMap.put(3, "def");
        digitMap.put(4, "ghi");
        digitMap.put(5, "jkl");
        digitMap.put(6, "mno");
        digitMap.put(7, "pqrs");
        digitMap.put(8, "tuv");
        digitMap.put(9, "wxyz");
        List<String> res = new ArrayList<String>();
        if (digits == null || digits.isEmpty()) return res;
        helper(0, digitMap, digits, res, "");
        return res;
    }
    private static void helper(int i, Map<Integer, String> map, String digits, List<String> res, String str){
        if(i == digits.length()) {
            res.add(str);
            return;
        }
        int temp = digits.charAt(i)-'0';
        for(int j = 0; j < map.get(temp).length(); j++){
            helper(i+1, map, digits, res, str+map.get(temp).charAt(j)); //stringbuilder way:
                                                                        //helper(i+1, map, digits, res, str.append(map.get(temp).charAt(j)));
                                                                        //str.deleteCharAt(i);
        }
    }
}
