/*Given a set of distinct positive integers, find the largest subset such that every pair (Si, Sj) of elements in this subset satisfies: Si % Sj = 0 or Sj % Si = 0.

If there are multiple solutions, return any subset is fine.

Example 1:

nums: [1,2,3]

Result: [1,2] (of course, [1,3] will also be ok)
Example 2:

nums: [1,2,4,8]

Result: [1,2,4,8]
*/
public class Solution {
    public List<Integer> largestDivisibleSubset(int[] nums) {
        List<Integer> res = new ArrayList<>();
        if(nums.length == 1) {
            res.add(nums[0]);
            return res;
        }
        if(nums.length == 0) {
            return res;
        }
        int[] dp = new int[nums.length]; // to store the longest length of subset for each element
        int[] prev = new int[nums.length]; // to store the previous index of the longest subset
        int maxIndex = -1; // the max indext of the element which has the longest sequence of subset
        int max = 0;
        Arrays.sort(nums);
        //find the array of dp
        for(int i = 0; i < nums.length; i++) {
            dp[i] = 1;
            prev[i] = -1;
            for(int j = i-1; j >= 0; j--) {
                if(nums[i] % nums[j] == 0 && dp[j] + 1 > dp[i]) {
                    dp[i] = dp[j] + 1;
                    prev[i] = j;
                }
                if(dp[i] > max) {
                    max = dp[i];
                    maxIndex = i;
                }
            }
        }
        for(int i = 0; i < max; i++){
            res.add(nums[maxIndex]);
            maxIndex = prev[maxIndex];
        }
       // Collections.reverse(res);
        return res;
    }
}
