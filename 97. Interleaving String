/*
Given s1, s2, s3, find whether s3 is formed by the interleaving of s1 and s2.

For example,
Given:
s1 = "aabcc",
s2 = "dbbca",

When s3 = "aadbbcbcac", return true.
When s3 = "aadbbbaccc", return false.
*/
solution: if the ith character in A match the ith character in C, dp[i] will be true if dp[i-1] is true 

public class Solution {
    public boolean isInterleave(String s1, String s2, String s3) {
        int m = s1.length();
        int n = s2.length();
        if(s3.length() != m+n) {
            return false;
        }
        boolean[][] dp = new boolean[m+1][n+1];
        for(int i = 0; i <= m; i++) {
            for(int j = 0; j <= n; j++) {
                if(i == 0 && j == 0) {
                    dp[i][j] = true;
                } else if(i == 0 && s2.charAt(j-1) == s3.charAt(j-1)) {
                    dp[i][j] = dp[i][j-1];
                } else if(j == 0 && s1.charAt(i-1) == s3.charAt(i-1)) {
                    dp[i][j] = dp[i-1][j];
                } else if(i != 0 && j != 0) {
                    if(s1.charAt(i-1) == s3.charAt(i+j-1) && s2.charAt(j-1) != s3.charAt(i+j-1)) {
                    //1. If character of A matches with character of C
                    // but not of B
                        dp[i][j] = dp[i-1][j];
                    } else if(s2.charAt(j-1) == s3.charAt(i+j-1) && s1.charAt(i-1) != s3.charAt(i+j-1)) {
                        dp[i][j] = dp[i][j-1];
                    } else if(s1.charAt(i-1) == s3.charAt(i+j-1) && s2.charAt(j-1) == s3.charAt(i+j-1)) {
                        dp[i][j] = (dp[i][j-1] || dp[i-1][j]);
                    }
                }
            }
        }
        return dp[m][n];
    }
}
