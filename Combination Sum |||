public class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
        List<List<Integer>> result= new ArrayList<>();
        dfs(k,n,1,new ArrayList<Integer>(),result);
        return result;
    }

    public void dfs(int k, int n, int start,List<Integer>path,List<List<Integer>>result){
        if(k==0 && n==0){
            result.add(path);
        }
        for(int i=start;i<=9;i++){
            if(n-i>=0){
                List<Integer> nPath= new ArrayList<>(path);
                nPath.add(i);
                dfs(k-1, n-i, i+1, nPath,result);  // next one start from i+1
            }
        }
    }
}
