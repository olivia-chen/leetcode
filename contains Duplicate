// if use two iteration, time limit error; use Set or Hashtable will work on the dupicate problem

import java.util.Hashtable;
import java.util.Set;

public class Solution {
    public boolean containsDuplicate(int[] nums) {
        if(nums == null){
            return false;
        }else{
            Hashtable table = new Hashtable();
            for(int i = 0; i < nums.length; i++){
                table.put(nums[i], i);
            }
            
            if(table.size() != nums.length){
                return true;
            }else{
                return false;
            }
        } 
    }
}

// optimized by HashSet

public class Solution {
    public boolean containsDuplicate(int[] nums) {

        HashSet<Integer> hm = new HashSet<>();
        for(int i = 0; i < nums.length; i++) {
            if(hm.contains(nums[i])){
                return true;
            }else{
                hm.add(nums[i]);
            }
        }
        return false;
    }
}
