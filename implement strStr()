/*Returns the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.*/

//Boyer-Moore(bad character , good suffix)
//KMP(Longest Prefix as Suffix)
public class Solution {
    private int[] preProcessPattern(char[] ptrn) {
        int i = 0, j = -1;
        int ptrnLen = ptrn.length;
        int[] b = new int[ptrnLen + 1];
        
        b[i] = j;
        while (i < ptrnLen) {   
            while (j >= 0 && ptrn[i] != ptrn[j]) {
        // if there is mismatch consider the next widest border
        // The borders to be examined are obtained in decreasing order from 
        // the values b[i], b[b[i]] etc.
            j = b[j];
            }
            i++;
            j++;
            b[i] = j;
        }
        return b;
    }
    public int strStr(String haystack, String needle) {
        int i = 0, j = 0;
        // pattern and text lengths
        if(needle.length() == 0){
            return 0;
        }
        char[] text = haystack.toCharArray();
        char[] ptrn = needle.toCharArray();
        int ptrnLen = ptrn.length;
        int txtLen = text.length;
    
        // initialize new array and preprocess the pattern
        int[] b = preProcessPattern(ptrn);
        while (i < txtLen) {
            while (j >= 0 && text[i] != ptrn[j]) {
                j = b[j];
            }
            i++;
            j++;
    
        // a match is found
            if (j == ptrnLen) {
                //System.out.println("found substring at index:" + (i - ptrnLen));
                j = b[j];
                return i-ptrnLen;
            }
        }
        return -1;
    }
}
