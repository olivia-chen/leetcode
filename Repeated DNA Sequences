public class Solution {
    public List<String> findRepeatedDnaSequences(String s) {
        Map<Character, Integer> map = new  HashMap<Character, Integer>();
        ArrayList<String> result = new ArrayList<String>(); 
        int len = s.length();
        if(len > 9){
            map.put('A', 0);
            map.put('C', 1);
            map.put('G', 2);
            map.put('T', 3);
            int ss = 0;
            Set<Integer> nset = new HashSet<Integer>();
            Set<Integer> rset = new HashSet<Integer>();
            for(int i = 0; i< s.length(); i++){
                if(i < 9){
                    ss = (ss << 2) + map.get(s.charAt(i));  // bitwise has lower priority than operater, so should add()
                }else{
                    ss = (ss << 2) + map.get(s.charAt(i));
                    ss = ss & ((1 << 20) - 1);  // also could write in ss = ss & (1 << 20) - 1;
                    //ss = (ss << (2*(i-9))) >> (2*(i-9));
                    //ss = ss >>> (2*(i-9));
                    if(nset.contains(ss) && !rset.contains(ss)){
                        result.add(s.substring(i-9,i+1));
                        rset.add(ss);
                    }else{
                        nset.add(ss);
                    }
                }
            }
        }
        return result;
    }
}
