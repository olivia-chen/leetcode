// Java Iterator interface reference:
// https://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html
class PeekingIterator implements Iterator<Integer> {
private Integer peek = null;
private boolean p;
private Iterator<Integer> list = null;
	public PeekingIterator(Iterator<Integer> iterator) {
	    // initialize any member here.
	    //PeekingIterator res = new PeekingIterator(iterator);
	    list = iterator;
	    p = false;
	}

    // Returns the next element in the iteration without advancing the iterator.
	public Integer peek() {
	    if(p == false && list.hasNext()){
	        peek = list.next();
            p = true;
	    }
	    return peek;
	}

	// hasNext() and next() should behave the same as in the Iterator interface.
	// Override them if needed.
	@Override
	public Integer next() {
	    if(p == true){
	        p = false;
	        return peek;
	    }
	   return list.next();
	}

	@Override
	public boolean hasNext() {
	    if(p == true){
	        return true;
	    }
	   return list.hasNext();
	}
}
