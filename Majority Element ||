// O(1) space, cause can not use map, it's not constant memory
public class Solution {
    public List<Integer> majorityElement(int[] nums) {
        List<Integer> list = new ArrayList<Integer>();
        if(nums.length > 0){
            int m1 = nums[0];
            int m2 = nums[0];
            int c1 = 1;
            int c2 = 0;
            for(int i : nums){
                if(i == m1 || c1 == 0){
                    c1++;
                    m1 = i;
                }else if(i == m2 || c2 == 0){
                    c2++;
                    m2 = i;
                }else{
                    c1--;
                    c2--;
                }
            }
            c1 = 0;
            c2 = 0;
            for(int i : nums){
                if(i == m1){
                   c1++; 
                }else if(i == m2){
                    c2++;
                }
            }
            if(c1 > (int)(nums.length / 3)){
                list.add(m1);
            }
            if(c2 > (int)(nums.length / 3)){
                list.add(m2);
            }
        }
        return list;
    }
}

//hashmap version
public class Solution {
    public List<Integer> majorityElement(int[] nums) {
        int n = nums.length;
        int t = (int)(n/3);
        List<Integer> result = new ArrayList<Integer>();
        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        Set<Integer> set = new HashSet<Integer>();
        for(int i = 0; i < n; i++){
            if(!map.containsKey(nums[i])){
                map.put(nums[i], 1);
            }else{
                map.put(nums[i], map.get(nums[i]) + 1);
            }
            if(map.get(nums[i]) > t && !set.contains(nums[i])){
                   set.add(nums[i]); 
            }
        }
        for(int e : set){
            result.add(e);
        }
        return result;
    }
}
