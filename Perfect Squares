public class Solution {
    public int numSquares(int n) {
        int res = Integer.MAX_VALUE;
        int m = (int)Math.sqrt(n);
        if(n < 4){
            return n;
        }else{
            while(m > 0){
                int k = n;
                int x = m;
                int temp = 0;
                temp += k / (x*x);
                k = k % (x*x);
                temp += numSquares(k);
                if(temp < res){
                    res = temp;
                }
                m--;
            }
        }
        return res;
    }
}
// To Be Optimized
/*public class Solution {
    public int numSquares(int n) {
       int[] dp = new int[n + 1];
       Arrays.fill(dp, Integer.MAX_VALUE);
       dp[0] = 0;
       for(int i = 0; i <= n; i++){
           for(int j = 1; i + j * j <= n; j++){
               dp[i  + j * j] = Math.min(dp[i + j * j], dp[i] + 1);
            }
       }
       return dp[n];
    }
}*/
