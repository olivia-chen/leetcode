public class Solution {
    public boolean isValidSudoku(char[][] board) {
        for(int i = 0; i < 9; i++){
            Set<Character> row = new HashSet<Character>();
            for(int j = 0; j < 9; j++){
                if(board[i][j] != '.'){
                    if(row.contains(board[i][j])){
                        return false;
                    }else{
                        row.add(board[i][j]); 
                    }
                }
            }
        }
        for(int i = 0; i < 9; i++){
            Set<Character> column = new HashSet<Character>();
            for(int j = 0; j < 9; j++){
                if(board[j][i] != '.'){
                    if(column.contains(board[j][i])){
                        return false;
                    }else{
                        column.add(board[j][i]); 
                    }
                }
            }
        }
        for(int i = 0; i < 9; i += 3){
            for(int j = 0; j < 9; j += 3){
                Set<Character> nine = new HashSet<Character>();
                for(int m = 0; m < 3; m++){
                    for(int n = 0; n < 3; n++){
                        if(board[i+m][j+n] != '.'){          // key point: i+m, j+n
                            if(nine.contains(board[i+m][j+n])){
                                return false;
                            }else{
                                nine.add(board[i+m][j+n]); 
                                }
                            }
                        }
                    }
                }
            }
        return true;
    }
}
