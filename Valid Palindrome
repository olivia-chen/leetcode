public class Solution {
    public boolean isPalindrome(String s) {
        int front = 0;
        int len = s.length();
        int end = len - 1;
        if(s.equals(null)){
            return true;
        }else{
            while(front < len){
                String temp1 = s.charAt(front) + "";
                int temp = front;
                if(temp1.matches("[a-zA-Z0-9]")){
                    //String temp2 = s.charAt(end) + "";
                    while(end >= 0 && temp == front){
                        String temp2 = s.charAt(end) + "";
                        if(temp2.matches("[a-zA-Z0-9]")){
                            if(!temp1.toLowerCase().equals(temp2.toLowerCase())){
                                return false;
                            }
                            temp++;
                        }
                        end--;
                        
                    }
                }
                front++;
                
            }
            return true;
        }
    }
}


// optimize 1: front < len -----> front < end; end>=front// runtime short to 588ms

public class Solution {
    public boolean isPalindrome(String s) {
        int front = 0;
        int len = s.length();
        int end = len - 1;
        if(s.equals(null)){
            return true;
        }else{
            while(front < end){
                String temp1 = s.charAt(front) + "";
                int temp = front;
                if(temp1.matches("[a-zA-Z0-9]")){
                    while(end >= front && temp == front){
                        String temp2 = s.charAt(end) + "";
                        if(temp2.matches("[a-zA-Z0-9]")){
                            if(!temp1.toLowerCase().equals(temp2.toLowerCase())){
                                return false;
                            }
                            temp++;
                        }
                        end--;
                    }
                }
                front++;
            }
            return true;
        }
    }
}


//optimized 2: use Character.isLetterOrDigit(char) and Character.toLowercase(char)// runtime accelerate to 344ms

public class Solution {
    public boolean isPalindrome(String s) {
        int front = 0;
        int len = s.length();
        int end = len - 1;
        if(s.equals(null)){
            return true;
        }else{
            while(front < end){
                int temp = front;
                if(Character.isLetterOrDigit(s.charAt(front))){
                    while(end >= front && temp == front){
                        if(Character.isLetterOrDigit(s.charAt(end))){
                            if(Character.toLowerCase(s.charAt(front)) != Character.toLowerCase(s.charAt(end))){
                                return false;
                            }
                            temp++;  // stop when find the other letter or digit from the end
                        }
                        end--;
                    }
                }
                front++;
            }
            return true;
        }
    }
}
