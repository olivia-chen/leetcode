Given a list of unique words. Find all pairs of distinct indices (i, j) in the given list, so that the concatenation of the two words, i.e. words[i] + words[j] is a palindrome.

Example 1:
Given words = ["bat", "tab", "cat"]
Return [[0, 1], [1, 0]]
The palindromes are ["battab", "tabbat"]
Example 2:
Given words = ["abcd", "dcba", "lls", "s", "sssll"]
Return [[0, 1], [1, 0], [3, 2], [2, 4]]
The palindromes are ["dcbaabcd", "abcddcba", "slls", "llssssll"]


public class Solution {
    public List<List<Integer>> palindromePairs(String[] words) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        Map<String, Integer> map = new HashMap<>();
        for(int i = 0; i < words.length; i++){
            map.put(words[i], i);
        }
        //"" and any palindrome string is a pair
        if(map.containsKey("")) {
            for(int i = 0; i < words.length; i++) {
                if( i != map.get("") && isPalindrome(words[i])) {
                    res.add(Arrays.asList(i, map.get("")));
                    res.add(Arrays.asList(map.get(""), i));
                }
            }
        }
        for(int i = 0; i < words.length; i++){
        String cur_r = reverseString(words[i]);
        if(map.containsKey(cur_r)){
            int found = map.get(cur_r);
            if(found == i) continue;
            res.add(Arrays.asList(i, found));
        }
    }
        for(int i = 0; i < words.length; i++) {
            for(int j = 1; j < words[i].length(); j++) {
                if(isPalindrome(words[i].substring(0, j))){
                    String partOfReverse = reverseString(words[i].substring(j));
                    if(map.containsKey(partOfReverse) && i != map.get(partOfReverse)) {
                        res.add(Arrays.asList(map.get(partOfReverse), i));
                    }
                }
                if(isPalindrome(words[i].substring(j))){
                    String partOfReverse = reverseString(words[i].substring(0, j));
                    if(map.containsKey(partOfReverse) && i != map.get(partOfReverse)) {
                        res.add(Arrays.asList(i, map.get(partOfReverse)));
                    }
                }
            }  
        }
        return res;
    }
    private boolean isPalindrome(String s) {
        int i = 0;
        int j = s.length()-1;
        while(i < j) {
            if(s.charAt(i) != s.charAt(j)) {
                return false;
            }
            i++;
            j--;
        }
        return true;
    }
    public String reverseString(String s) {
        int i = 0;
        int j = s.length()-1;
        char[] chars = s.toCharArray();
        while(i < j) {
            char temp = chars[i];
            chars[i] = chars[j];
            chars[j] = temp;
            i++;
            j--;
        }
        return String.valueOf(chars);
    }
}
