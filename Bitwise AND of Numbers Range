public class Solution {
    public int rangeBitwiseAnd(int m, int n) {
        long m1 = m;
        long n1 = n;
        if(m1 == n1){
            return (int)m1;
        }
        if(n1 <= 2 * m1){
           long result = m1 ;
           while(m1 < n1){
               m1++;
               result = result & m1;
           }
           return (int)result; 
        }
        return 0;
    }
}

// optimized: no need to use 2*m (since exceed the max value, instead of n - m <= m)
public class Solution {
    public int rangeBitwiseAnd(int m, int n) {
        if(m == n){
            return m;
        }
        if(n - m <= m){
           int result = m;
           while(m < n){
               m++;
               result = result & m;
           }
           return result; 
        }
        return 0;
    }
}
