
/*Follow up for "Remove Duplicates":
What if duplicates are allowed at most twice?

For example,
Given sorted array nums = [1,1,1,2,2,3],

Your function should return length = 5, with the first five elements of nums being 1, 1, 2, 2 and 3. It doesn't matter what you leave beyond the new length.*/

public class Solution {
    public int removeDuplicates(int[] nums) {
        int i = 0;
        while(nums.length > 2 && i < nums.length-2){
            boolean swap = false;
           
            if(i > 0 && nums[i] < nums[i-1]){
                return i;
            }
            if(nums[i] >= nums[i+2]){
                int j = i+2;
                int k = j+1;
                while(k < nums.length && nums[i] >= nums[k]){
                    k++;
                }
                if(k < nums.length && nums[j] < nums[k]){
                    int temp = nums[j];
                    nums[j] = nums[k];
                    nums[k] = temp;
                    swap = true;
                }
                if(swap == false){
                    if(nums[i] <= nums[i+1]){
                        return i+2;
                    }
                    return i+1;
                }
            }
             i++;
        }
        return nums.length;
    }
}
