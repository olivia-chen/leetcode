/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<List<Integer>> pathSum(TreeNode root, int sum) {
        ArrayList<List<Integer>> res = new ArrayList<List<Integer>>();
        ArrayList<Integer> list = new ArrayList<Integer>();
        if(root != null){
            pathSum(root, sum, res, list, 0);
        }
        return res;
    }
    private void pathSum(TreeNode root, int sum, ArrayList<List<Integer>> res, ArrayList<Integer> list, int s) {
        if(root != null){
            list.add(root.val);
            if(root.left == null && root.right == null){
                if(s + root.val == sum){
                    res.add(new ArrayList<Integer>(list));
                }
            }else{
                pathSum(root.left, sum, res, list, s+root.val);
                if(root.left != null && list.size() != 0){
                    list.remove(list.size()-1);
                }
                pathSum(root.right, sum, res, list, s+root.val);
                if(root.right != null && list.size() != 0){
                    list.remove(list.size()-1);
                }
            }
        }
    }
}
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<List<Integer>> pathSum(TreeNode root, int sum) {
        ArrayList<List<Integer>> res = new ArrayList<List<Integer>>();
        ArrayList<Integer> list = new ArrayList<Integer>();
        if(root != null){
            pathSum(root, sum, res, list, 0);
        }
        return res;
    }
    private void pathSum(TreeNode root, int sum, ArrayList<List<Integer>> res, ArrayList<Integer> list, int s) {
        if(root != null){
            list.add(root.val);
            if(root.left == null && root.right == null){
                if(s + root.val == sum){
                    res.add(new ArrayList<Integer>(list));
                }
            }else{
                pathSum(root.left, sum, res, list, s+root.val);
                /*if(root.left != null && list.size() != 0){
                    list.remove(list.size()-1);
                }*/
                pathSum(root.right, sum, res, list, s+root.val);
                /*if(root.right != null && list.size() != 0){
                    list.remove(list.size()-1);
                }*/
            }
            list.remove(list.size()-1); // write this line at the end
        }
    }
}
