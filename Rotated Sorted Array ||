bool search(int A[], int n, int key) { // compare mid and high or low, could tell left or right part is sorted
    int l = 0, r = n - 1;
    while (l <= r) {
        int m = l + (r - l)/2;
        if (A[m] == key) return true; //return m in Search in Rotated Array I
        if (A[l] < A[m]) { //left half is sorted
            if (A[l] <= key && key < A[m])
                r = m - 1;
            else
                l = m + 1;
        } else if (A[l] > A[m]) { //right half is sorted
            if (A[m] < key && key <= A[r])
                l = m + 1;
            else
                r = m - 1;
        } else l++;
    }
    return false;
}

// my own way:
public class Solution { // find the minimum first use the way in "find minimum in rotated sorted array": high--
    public boolean search(int[] nums, int target) {
        int low = 0;
        int high = nums.length - 1;
        if(nums[0] == nums[nums.length - 1]){
            while(high > 0){
                if(nums[high-1] != nums[high]){
                    high = high-1;
                    break;
                }
                high--;
            }
        }
        int min = findMin(nums, high);
        if(min > 0){
            if(target < nums[high]){
                low = min;
                high = nums.length - 1;
            }else if(target > nums[high]){
                low = 0;
                high = min-1;
            }else{
                return true;
            }
        }
        while(low < high){
            int mid = (low + high) / 2;
            if(target > nums[mid]){
                low = mid + 1;
            } else if(target < nums[mid]){
                high = mid - 1;
            }else{
                return true;
            }
        }
        if(target == nums[low]){
            return true;
        }
        return false;
    }
    private int findMin(int[] num, int high) {
        int low = 0;
        //int high = num.length - 1;
        while(low < high){
            int mid = (low + high) / 2;
            if(num[high] < num[mid]){
                low = mid + 1;
            } else {
                high = mid;
            }
        }
        return high;
    }
}
