/*There are N gas stations along a circular route, where the amount of gas at station i is gas[i].

You have a car with an unlimited gas tank and it costs cost[i] of gas to travel from station i to its next station (i+1). You begin the journey with an empty tank at one of the gas stations.

Return the starting gas station's index if you can travel around the circuit once, otherwise return -1.

Note:
The solution is guaranteed to be unique.*/

public class Solution {
    public int canCompleteCircuit(int[] gas, int[] cost) {
        for(int i = 0; i < gas.length; i++){//from i to i+1 station
            int k = i;
            int n = 0;//count the station traveled
            int tank = 0;
            while(cost[k] <= tank + gas[k]){//find a start station
                if(n == gas.length){
                    return k;
                }
                tank += gas[k] - cost[k];
                k++;
                if(k == gas.length){
                    k = 0;
                }
                n++;
            }
        }
        return -1;
    }
}

// The solution is guaranteed to be unique. 
public class Solution {
    public int canCompleteCircuit(int[] gas, int[] cost) {
        int sumGas = 0;
        int sumCost = 0;
        int tank = 0;
        int start = 0;
        for(int i = 0; i < gas.length; i++){//from i to i+1 station
            sumGas += gas[i];
            sumCost += cost[i];
            tank += gas[i] - cost[i];
            if(tank < 0){
                start = i+1;
                tank = 0;
            }
        }
        if(sumGas >= sumCost){
            return start;
        }else{
            return -1;
        }
    }
}
