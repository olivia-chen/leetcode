public class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        ArrayList<List<Integer>> result = new ArrayList<List<Integer>>();
        Arrays.sort(nums);
        result.add(new ArrayList<Integer>());
        for(int i = 0; i < nums.length; i++){
            ArrayList<List<Integer>> r = new ArrayList<List<Integer>>(); // to avoid the concurrenctModificationError
            for(List<Integer> set : result){
                ArrayList<Integer> temp = new ArrayList<Integer>(set);
                temp.add(nums[i]);
                r.add(temp);
            }
            result.addAll(r);
        }
        return result;
    }
}


public class Solution {
   public List<List<Integer>> subsets(int[] nums) {
    List<List<Integer>> list = new ArrayList<>();
    Arrays.sort(nums);
    backtrack(list, new ArrayList<>(), nums, 0);
    return list;
}

private void backtrack(List<List<Integer>> list , List<Integer> tempList, int [] nums, int start){
    list.add(new ArrayList<>(tempList));
    for(int i = start; i < nums.length; i++){
        tempList.add(nums[i]);
        backtrack(list, tempList, nums, i + 1);
        tempList.remove(tempList.size() - 1);
    }
}
}
