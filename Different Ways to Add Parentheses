public class Solution {
    public List<Integer> diffWaysToCompute(String input) {
        input = input.trim();
        return diffWaysToCompute(input, 0, input.length()-1, false);
    }
    private List<Integer> diffWaysToCompute(String input, int s, int e, boolean hasOp){
        List<Integer> res = new LinkedList<Integer>();
        hasOp = digit(input.substring(s,e+1));
        if (s <= e && hasOp == true) {
            res.add(Integer.parseInt(input.substring(s,e+1)));
            return res;
        }
    
        for (int i = s; i < e; ++i) {
            if(input.charAt(i) == '+' || input.charAt(i) == '-' || input.charAt(i) == '*'){
                List<Integer> leftSubtrees = diffWaysToCompute(input, s, i - 1, hasOp);
                List<Integer> rightSubtrees = diffWaysToCompute(input, i + 1, e, hasOp);
                for (int left : leftSubtrees) {
                    for (int right : rightSubtrees) {
                        int op = 0;
                        if(input.charAt(i) == '+'){
                            op = left + right;
                        }
                        if(input.charAt(i) == '-'){
                            op = left - right;
                        }
                        if(input.charAt(i) == '*'){
                            op = left * right;
                        }
                        res.add(op);
                    }
                }
            }
        }
        return res;
    }
    private boolean digit(String input){
        for (int i = 0; i < input.length(); i++) {
            if(!Character.isDigit(input.charAt(i))){
                return false;
            }
        }
        return true;
    }
}
/*List<TreeNode> res = new LinkedList<TreeNode>();
    if (s > e) {
        res.add(null); // empty tree
        return res;
    }

    for (int i = s; i <= e; ++i) {
        List<TreeNode> leftSubtrees = generateSubtrees(s, i - 1);
        List<TreeNode> rightSubtrees = generateSubtrees(i + 1, e);

        for (TreeNode left : leftSubtrees) {
            for (TreeNode right : rightSubtrees) {
                TreeNode root = new TreeNode(i);
                root.left = left;
                root.right = right;
                res.add(root);
            }
        }
    }*/
