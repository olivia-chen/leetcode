/*Given a non-empty 2D matrix matrix and an integer k, find the max sum of a rectangle in the matrix such that its sum is no larger than k.

Example:
Given matrix = [
  [1,  0, 1],
  [0, -2, 3]
]
k = 2
The answer is 2. Because the sum of rectangle [[0, 1], [-2, 3]] is 2 and 2 is the max number no larger than k (k = 2).

Note:
The rectangle inside the matrix must have an area > 0.
What if the number of rows is much larger than the number of columns?
*/

public class Solution {
    public int maxSumSubmatrix(int[][] matrix, int target) {
        int row = matrix.length;
        int col = matrix[0].length;
        int m = Math.min(row, col);
        int n = Math.max(row, col);
        int res = Integer.MIN_VALUE;
        boolean colIsLonger = (col>row);
        for(int i = 0; i < m; i++){
            int[] nCummulateSum = new int[n];
            for(int j = i; j >=0; j--) {
                TreeSet<Integer> sumSet = new TreeSet<>();
                sumSet.add(0);
                int cum = 0;
                for(int k = 0; k < n; k++) {
                    nCummulateSum[k] = nCummulateSum[k] + (colIsLonger? matrix[j][k] : matrix[k][j]);
                    cum = cum + nCummulateSum[k];
                    Integer ceiling = sumSet.ceiling(cum - target); //to get the globle_max = cum[j] - cum[i] <= k, 
                                                                    //check the upperbound of (cum[j]-k), if exit, which is cum[i], 
                                                                    //and globle_max = cum[j] - upperbound
                    if(ceiling != null) {
                        res = Math.max(res, cum - ceiling);
                    }
                    sumSet.add(cum);
                }
            }
        }
        return res;
    }
}
