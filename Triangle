/*Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.

For example, given the following triangle
[
     [2],
    [3,4],
   [6,5,7],
  [4,1,8,3]
]*/

public class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
        if(triangle.size() == 0){
            return 0;
        }
        int[] dp = new int[triangle.size()];
        for(int i = 1; i < dp.length; i++){
            dp[i] = Integer.MAX_VALUE;
        }
        dp[0] = triangle.get(0).get(0);
        if(triangle.size() == 1){
            return dp[0];
        }
        for(int j = 1; j < triangle.size(); j++){
            List<Integer> item = triangle.get(j);
            int pre = dp[0];
            dp[0] += item.get(0);
            for(int i = 1; i < item.size(); i++){
                int temp = dp[i];                               //here is the key point, to preserve the previous element
                dp[i] = Math.min(dp[i], pre) + item.get(i);
                pre = temp;                                     // then transfer to the element for next use
            }
        }
        Arrays.sort(dp);
        return dp[0];
    }
}
