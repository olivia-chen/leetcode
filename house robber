public class Solution {
    public int rob(int[] nums) {
      int last = 0;
        int now = 0;
        int tmp;
        for (int n :nums) {
            tmp = now;
            now = Math.max(last + n, now);
            last = tmp;
        }
        return now;
    }
}

public class Solution {
    public int rob(int[] nums) {
       int len = nums.length;
       if(len <= 0){
           return 0;
       }else if(len == 1){
           return nums[0];
       }else if(len == 2){
           return Math.max(nums[0], nums[1]);
       }else if(len == 3){
           return Math.max(nums[1], nums[0] + nums[2]);
       }else if(len > 3){
           nums[2] = Math.max(nums[1], nums[0] + nums[2]);
           for(int i = 3; i < nums.length; i++){
                nums[i] = Math.max(nums[i - 2], nums[i - 3]) + nums[i];
           }
       }
       return Math.max(nums[len - 2], nums[len - 1]);
    }
}


/*
i=1, f(1)
i=2, max(f(1),f(2))
i=3, max(f(2),f(1) + f(3))

f(i) = max(f(i-2), f(i-3)) + f(i)

return f(i)*/
