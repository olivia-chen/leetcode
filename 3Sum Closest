/*Given an array S of n integers, find three integers in S such that the sum is closest to a given number, target. Return the sum of the three integers. You may assume that each input would have exactly one solution.*/

public class Solution {
    public int threeSumClosest(int[] nums, int target) {
        int com = Integer.MAX_VALUE;
        int res = 0;
        for(int i = 0; i < nums.length-2; i++){
            for(int j = i+1; j < nums.length-1; j++){
                for(int k = j+1; k < nums.length; k++){
                    if(Math.abs(nums[i] + nums[j] + nums[k] - target) < com){
                        if(nums[i] + nums[j] + nums[k] - target == 0){
                            return target;
                        }
                        com = Math.abs(nums[i] + nums[j] + nums[k] - target);
                        res = nums[i] + nums[j] + nums[k];
                    }
                }
            }
        }
        return res;
    }
}

//O(n2)
public class Solution {
    public int threeSumClosest(int[] nums, int target) {
        int res = nums[0] + nums[1] + nums[nums.length-1];
        Arrays.sort(nums);
        for(int i = 0; i < nums.length-2; i++){
            int start = i+1;
            int end = nums.length-1;
            while(start < end){
                int com = nums[i] + nums[start] + nums[end];
                if(nums[i] + nums[start] + nums[end] - target == 0){
                    return target;
                }
                if(com > target){
                    end--;
                }else{
                    start++;
                }
                if(Math.abs(com - target) < Math.abs(res - target)){
                    res = com;
                }
            }
        }
        return res;
    }
}
